/*
合并表记录:
数据表记录包含表索引和数值，请对表索引相同的记录进行合并，即将相同索引的数值进行求和运算，输出按照key值升序进行输出。

输入描述:
先输入键值对的个数
然后输入成对的index和value值，以空格隔开


输出描述:
输出合并后的键值对（多行）

输入例子:
4
0 1
0 2
1 2
3 4

输出例子:
0 3
1 2
3 4
*/
import java.util.*;
public class Main{
    public static void main(String[] args){
        Scanner scan = new Scanner(System.in);
        Map<Integer,Integer> map = new TreeMap<Integer,Integer>();
        int n = scan.nextInt();
        while(scan.hasNext()){
            for(int i = 0;i<n;i++){
                int key = scan.nextInt();
                int value = scan.nextInt();
                if(map.containsKey(key)){
                    map.put(key,map.get(key)+value);
                }else{
                    map.put(key,value);
                }
            }
            for(Map.Entry<Integer,Integer> entry:map.entrySet()){
                System.out.println(entry.getKey()+" "+entry.getValue());
            }
        }
    }
}
/*
HashMap：基于哈希表实现。适用于在Map中插入、删除和定位元素，无序。
Treemap：基于红黑树实现。适用于按自然顺序或自定义顺序遍历键(key)，有序。
HashMap通常比TreeMap快一点(树和哈希表的数据结构使然)，建议多使用HashMap，在需要排序的Map时候才用TreeMap。
*/