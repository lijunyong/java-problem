/*
提取不重复的整数:
输入一个int型整数，按照从右向左的阅读顺序，返回一个不含重复数字的新的整数。

输入描述:
输入一个int型整数


输出描述:
按照从右向左的阅读顺序，返回一个不含重复数字的新的整数

输入例子:
9876673

输出例子:
37689
*/
import java.util.*;
public class Main{
	public static void main(String[] args){
		Scanner scan = new Scanner(System.in);
        char c = '*';
		while(scan.hasNext()){
			String s = scan.nextLine();
            int len = s.length();
            //char[] s1 = s.toCharArray();
            for(int i=len-1;i>=0;i-- ){
                if(s.charAt(i)!=c){
                    System.out.print(s.charAt(i));
                    s = s.replace(s.charAt(i),c);
                }
            }
		}
	}
}
/*
public String replace(char oldChar,char newChar)
返回一个新的字符串，它是通过用 newChar 替换此字符串中出现的所有 oldChar 而生成的。 如 果 oldChar 在此 String 对象表示的字符序列中没有出现，则返回对此 String 对象的引用。否则，创建一个新的 String 对象，用来表示与此 String 对象表示的字符序列相等的字符序列，除了每个出现的 oldChar 都被一个 newChar 替换之外。

public String replaceAll(String regex,String replacement)使用给定的 replacement 字符串替换此字符串匹配给定的正则表达式的每个子字符串。此方法调用的 str.replaceAll(regex, repl) 形式产生与以下表达式完全相同的结果：
Pattern.compile(regex).matcher(str).replaceAll(repl)
参数：
regex – 用来匹配此字符串的正则表达式
返回：得到的 String
抛出： PatternSyntaxException – 如果正则表达式的语法无效。
*/